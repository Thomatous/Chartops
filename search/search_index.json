{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to chartops","text":"<p>A python package for geospatial analysis and mapping. Created as part of the course on Geospatial Software Design by the university of Tennessee Knoxville.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://Thomatous.github.io/chartops</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-2842025","title":"v0.0.1 - 28/4/2025","text":"<p>Improvement:</p> <ul> <li>Initial project setup</li> </ul> <p>New Features:</p> <ul> <li>Initial CookieCutter features</li> </ul>"},{"location":"chartops/","title":"chartops module","text":""},{"location":"chartops/#chartops.chartops.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>chartops/chartops.py</code> <pre><code>class Map(iPyLeafletMap):\n    def add_basemap(self, basemap_name: str, **kwargs) -&gt; None:\n        \"\"\"\n        Add a basemap to the ipyleaflet map.\n\n        Args:\n            basemap_name (str): Name of the basemap to add. Resolved with xyzservices.\n            **kwargs (dict): Extra kwargs to pass to basemap_to_tiles.\n\n        Returns:\n            None\n        \"\"\"\n        basemap = common.resolve_basemap_name(basemap_name)\n        basemap_tiles = basemap_to_tiles(basemap, **kwargs)\n        basemap_tiles.base = True\n        basemap_tiles.name = basemap_name\n        self.add(basemap_tiles)\n\n    def add_layer_control(self, position: str = \"topright\") -&gt; None:\n        \"\"\"\n        Add a layer control to the map.\n\n        Args:\n            position (str, optional): Position of the layer control. Valid positions are \"topright\", \"topleft\", \"bottomright\", \"bottomleft\". Default is \"topright\".\n\n        Returns:\n            None\n\n        Raises:\n            ValueError: If the position is not valid.\n        \"\"\"\n        valid_positions = [\"topright\", \"topleft\", \"bottomright\", \"bottomleft\"]\n        if position not in valid_positions:\n            raise ValueError(\n                f\"Invalid position '{position}'. Valid positions are: {valid_positions}\"\n            )\n        self.add(LayersControl(position=position))\n\n    def add_vector(self, filepath: Union[Path, str], name: str = \"\", **kwargs) -&gt; None:\n        \"\"\"\n        Add a vector layer to the map.\n\n        Args:\n            filepath (Path or str): Path to the vector dataset or URL to a remote file.\n            name (str): Name of the layer. Defaults to ''..\n            **kwargs (dict): Additional styling options for the layer. Valid options include:\n                - color: str (default: 'blue')\n                - weight: int (default: 2)\n                - fillOpacity: float (default: 0.1)\n\n        Returns:\n            None\n\n        Raises:\n            FileNotFoundError: If the local filepath does not exist.\n            ValueError: If the vector data cannot be read or converted to GeoJSON, or if styling options are invalid.\n        \"\"\"\n        if isinstance(filepath, Path) and not filepath.exists():\n            raise FileNotFoundError(f\"File not found: {filepath}\")\n\n        color = kwargs.get(\"color\", \"blue\")\n        if not isinstance(color, str):\n            raise ValueError(f\"color must be a string, got {type(color)}\")\n\n        weight = kwargs.get(\"weight\", 2)\n        if not isinstance(weight, int):\n            raise ValueError(f\"weight must be an integer, got {type(weight)}\")\n\n        fillOpacity = kwargs.get(\"fillOpacity\", 0.1)\n        if not isinstance(fillOpacity, (int, float)) or not (0 &lt;= fillOpacity &lt;= 1):\n            raise ValueError(\"fillOpacity must be a float between 0 and 1\")\n\n        try:\n            gdf = gpd.read_file(filepath)\n            geojson = gdf.__geo_interface__\n            layer = GeoJSON(\n                data=geojson,\n                name=name,\n                style={\"color\": color, \"weight\": weight, \"fillOpacity\": fillOpacity},\n            )\n            self.add(layer)\n        except Exception as e:\n            raise ValueError(f\"Failed to add vector layer from {filepath}: {e}\")\n\n    def add_raster(\n        self,\n        url: Union[str, Path],\n        opacity: float,\n        name: Optional[str] = None,\n        colormap: Optional[Union[str, dict]] = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"\n        Add a raster layer to the map using a local or remote tile source.\n\n        Args:\n            url (str or Path): Path or URL to the raster file.\n            opacity (float): Opacity of the raster layer. Must be between 0 and 1.\n            name (str, optional): Name of the layer. Defaults to the stem of the file path.\n            colormap (str or dict, optional): Colormap to apply to the raster. Can be a colormap name or a dict. Resolved using `common.resolve_colormap`.\n            **kwargs (dict): Additional keyword arguments passed to the tile layer.\n\n        Returns:\n            None\n\n        Raises:\n            FileNotFoundError: If the local raster file does not exist.\n            ValueError: If the opacity is not valid or raster layer cannot be added.\n        \"\"\"\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n        if isinstance(url, Path) and not url.exists():\n            raise FileNotFoundError(f\"Raster file not found: {url}\")\n\n        if not isinstance(opacity, (int, float)) or not (0 &lt;= opacity &lt;= 1):\n            raise ValueError(\"opacity must be a float between 0 and 1\")\n\n        try:\n            colormap_arg = common.resolve_colormap(colormap)\n        except Exception as e:\n            raise ValueError(f\"Failed to resolve colormap: {e}\")\n\n        try:\n            client = TileClient(str(url))\n        except Exception as e:\n            raise ValueError(f\"Failed to create TileClient from {url}: {e}\")\n\n        try:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n            tile_layer = get_leaflet_tile_layer(\n                client, colormap=colormap_arg, opacity=opacity, **kwargs\n            )\n            tile_layer.name = name or \"\"\n            self.add(tile_layer)\n        except Exception as e:\n            raise ValueError(f\"Failed to add raster layer: {e}\")\n\n    def add_image(\n        self,\n        url: Union[str, Path],\n        bounds: Tuple[Tuple[float, float], Tuple[float, float]],\n        opacity: float,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"\n        Add a static image overlay to the map.\n\n        Args:\n            url (str or Path): URL or path to the image to overlay.\n            bounds (tuple): A tuple of ((south, west), (north, east)) coordinates defining the bounding box of the image.\n            opacity (float): Opacity of the image overlay. Must be between 0 and 1.\n            **kwargs (dict): Additional keyword arguments passed to ImageOverlay.\n\n        Returns:\n            None\n\n        Raises:\n            ValueError: If the bounds are not in correct format or opacity is invalid.\n            FileNotFoundError: If the local image path does not exist.\n        \"\"\"\n        if isinstance(url, Path) and not url.exists():\n            raise FileNotFoundError(f\"Image file not found: {url}\")\n\n        if (\n            not isinstance(bounds, tuple)\n            or len(bounds) != 2\n            or not all(isinstance(pair, tuple) and len(pair) == 2 for pair in bounds)\n            or not all(\n                isinstance(coord, (int, float)) for pair in bounds for coord in pair\n            )\n        ):\n            raise TypeError(\n                \"bounds must be a tuple of two (lat, lon) tuples: ((south, west), (north, east))\"\n            )\n\n        if not isinstance(opacity, (int, float)) or not (0 &lt;= opacity &lt;= 1):\n            raise TypeError(\"opacity must be a float between 0 and 1\")\n\n        try:\n            image = ImageOverlay(url=str(url), bounds=bounds, opacity=opacity, **kwargs)\n            self.add(image)\n        except Exception as e:\n            raise ValueError(f\"Failed to add image overlay: {e}\")\n\n    def add_video(\n        self,\n        url: Union[str, Path],\n        bounds: Tuple[Tuple[float, float], Tuple[float, float]],\n        opacity: float,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"\n        Add a video overlay to the map.\n\n        Args:\n            url (str or Path): URL or path to the video to overlay.\n            bounds (tuple): A tuple of ((south, west), (north, east)) coordinates defining the bounding box of the video.\n            opacity (float): Opacity of the video overlay. Must be between 0 and 1.\n            **kwargs (dict): Additional keyword arguments passed to VideoOverlay.\n\n        Returns:\n            None\n\n        Raises:\n            ValueError: If the bounds are not in correct format or opacity is invalid.\n            FileNotFoundError: If the local video path does not exist.\n        \"\"\"\n        if isinstance(url, Path) and not url.exists():\n            raise FileNotFoundError(f\"Video file not found: {url}\")\n\n        if (\n            not isinstance(bounds, tuple)\n            or len(bounds) != 2\n            or not all(isinstance(pair, tuple) and len(pair) == 2 for pair in bounds)\n            or not all(\n                isinstance(coord, (int, float)) for pair in bounds for coord in pair\n            )\n        ):\n            raise TypeError(\n                \"bounds must be a tuple of two (lat, lon) tuples: ((south, west), (north, east))\"\n            )\n\n        if not isinstance(opacity, (int, float)) or not (0 &lt;= opacity &lt;= 1):\n            raise TypeError(\"opacity must be a float between 0 and 1\")\n\n        try:\n            video = VideoOverlay(url=str(url), bounds=bounds, opacity=opacity, **kwargs)\n            self.add(video)\n        except Exception as e:\n            raise ValueError(f\"Failed to add video overlay: {e}\")\n\n    def add_wms_layer(\n        self, url: str, layers: str, name: str, format: str, transparent: bool, **kwargs\n    ) -&gt; None:\n        \"\"\"\n        Add a WMS (Web Map Service) layer to the map.\n\n        Args:\n            url (str): Base URL of the WMS service.\n            layers (str): Comma-separated list of layer names to request from the service.\n            name (str): Name of the layer to show in the map.\n            format (str): Image format for the WMS tiles (e.g., 'image/png').\n            transparent (bool): Whether the WMS tiles should support transparency.\n            **kwargs (dict): Additional keyword arguments passed to the WMSLayer.\n\n        Returns:\n            None\n\n        Raises:\n            TypeError: If any of the required parameters are not of the expected type.\n            ValueError: If the WMS layer cannot be created or added.\n        \"\"\"\n        if not isinstance(url, str):\n            raise TypeError(f\"url must be a string, got {type(url)}\")\n        if not isinstance(layers, str):\n            raise TypeError(f\"layers must be a string, got {type(layers)}\")\n        if not isinstance(name, str):\n            raise TypeError(f\"name must be a string, got {type(name)}\")\n        if not isinstance(format, str):\n            raise TypeError(f\"format must be a string, got {type(format)}\")\n        if not isinstance(transparent, bool):\n            raise TypeError(f\"transparent must be a boolean, got {type(transparent)}\")\n\n        try:\n            wms = WMSLayer(\n                url=url,\n                layers=layers,\n                format=format,\n                transparent=transparent,\n                **kwargs,\n            )\n            wms.name = name\n            self.add(wms)\n        except Exception as e:\n            raise ValueError(f\"Failed to add WMS layer: {e}\")\n</code></pre>"},{"location":"chartops/#chartops.chartops.Map.add_basemap","title":"<code>add_basemap(self, basemap_name, **kwargs)</code>","text":"<p>Add a basemap to the ipyleaflet map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap_name</code> <code>str</code> <p>Name of the basemap to add. Resolved with xyzservices.</p> required <code>**kwargs</code> <code>dict</code> <p>Extra kwargs to pass to basemap_to_tiles.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>chartops/chartops.py</code> <pre><code>def add_basemap(self, basemap_name: str, **kwargs) -&gt; None:\n    \"\"\"\n    Add a basemap to the ipyleaflet map.\n\n    Args:\n        basemap_name (str): Name of the basemap to add. Resolved with xyzservices.\n        **kwargs (dict): Extra kwargs to pass to basemap_to_tiles.\n\n    Returns:\n        None\n    \"\"\"\n    basemap = common.resolve_basemap_name(basemap_name)\n    basemap_tiles = basemap_to_tiles(basemap, **kwargs)\n    basemap_tiles.base = True\n    basemap_tiles.name = basemap_name\n    self.add(basemap_tiles)\n</code></pre>"},{"location":"chartops/#chartops.chartops.Map.add_image","title":"<code>add_image(self, url, bounds, opacity, **kwargs)</code>","text":"<p>Add a static image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str or Path</code> <p>URL or path to the image to overlay.</p> required <code>bounds</code> <code>tuple</code> <p>A tuple of ((south, west), (north, east)) coordinates defining the bounding box of the image.</p> required <code>opacity</code> <code>float</code> <p>Opacity of the image overlay. Must be between 0 and 1.</p> required <code>**kwargs</code> <code>dict</code> <p>Additional keyword arguments passed to ImageOverlay.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the bounds are not in correct format or opacity is invalid.</p> <code>FileNotFoundError</code> <p>If the local image path does not exist.</p> Source code in <code>chartops/chartops.py</code> <pre><code>def add_image(\n    self,\n    url: Union[str, Path],\n    bounds: Tuple[Tuple[float, float], Tuple[float, float]],\n    opacity: float,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a static image overlay to the map.\n\n    Args:\n        url (str or Path): URL or path to the image to overlay.\n        bounds (tuple): A tuple of ((south, west), (north, east)) coordinates defining the bounding box of the image.\n        opacity (float): Opacity of the image overlay. Must be between 0 and 1.\n        **kwargs (dict): Additional keyword arguments passed to ImageOverlay.\n\n    Returns:\n        None\n\n    Raises:\n        ValueError: If the bounds are not in correct format or opacity is invalid.\n        FileNotFoundError: If the local image path does not exist.\n    \"\"\"\n    if isinstance(url, Path) and not url.exists():\n        raise FileNotFoundError(f\"Image file not found: {url}\")\n\n    if (\n        not isinstance(bounds, tuple)\n        or len(bounds) != 2\n        or not all(isinstance(pair, tuple) and len(pair) == 2 for pair in bounds)\n        or not all(\n            isinstance(coord, (int, float)) for pair in bounds for coord in pair\n        )\n    ):\n        raise TypeError(\n            \"bounds must be a tuple of two (lat, lon) tuples: ((south, west), (north, east))\"\n        )\n\n    if not isinstance(opacity, (int, float)) or not (0 &lt;= opacity &lt;= 1):\n        raise TypeError(\"opacity must be a float between 0 and 1\")\n\n    try:\n        image = ImageOverlay(url=str(url), bounds=bounds, opacity=opacity, **kwargs)\n        self.add(image)\n    except Exception as e:\n        raise ValueError(f\"Failed to add image overlay: {e}\")\n</code></pre>"},{"location":"chartops/#chartops.chartops.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright')</code>","text":"<p>Add a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position of the layer control. Valid positions are \"topright\", \"topleft\", \"bottomright\", \"bottomleft\". Default is \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the position is not valid.</p> Source code in <code>chartops/chartops.py</code> <pre><code>def add_layer_control(self, position: str = \"topright\") -&gt; None:\n    \"\"\"\n    Add a layer control to the map.\n\n    Args:\n        position (str, optional): Position of the layer control. Valid positions are \"topright\", \"topleft\", \"bottomright\", \"bottomleft\". Default is \"topright\".\n\n    Returns:\n        None\n\n    Raises:\n        ValueError: If the position is not valid.\n    \"\"\"\n    valid_positions = [\"topright\", \"topleft\", \"bottomright\", \"bottomleft\"]\n    if position not in valid_positions:\n        raise ValueError(\n            f\"Invalid position '{position}'. Valid positions are: {valid_positions}\"\n        )\n    self.add(LayersControl(position=position))\n</code></pre>"},{"location":"chartops/#chartops.chartops.Map.add_raster","title":"<code>add_raster(self, url, opacity, name=None, colormap=None, **kwargs)</code>","text":"<p>Add a raster layer to the map using a local or remote tile source.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str or Path</code> <p>Path or URL to the raster file.</p> required <code>opacity</code> <code>float</code> <p>Opacity of the raster layer. Must be between 0 and 1.</p> required <code>name</code> <code>str</code> <p>Name of the layer. Defaults to the stem of the file path.</p> <code>None</code> <code>colormap</code> <code>str or dict</code> <p>Colormap to apply to the raster. Can be a colormap name or a dict. Resolved using <code>common.resolve_colormap</code>.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Additional keyword arguments passed to the tile layer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>If the local raster file does not exist.</p> <code>ValueError</code> <p>If the opacity is not valid or raster layer cannot be added.</p> Source code in <code>chartops/chartops.py</code> <pre><code>def add_raster(\n    self,\n    url: Union[str, Path],\n    opacity: float,\n    name: Optional[str] = None,\n    colormap: Optional[Union[str, dict]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a raster layer to the map using a local or remote tile source.\n\n    Args:\n        url (str or Path): Path or URL to the raster file.\n        opacity (float): Opacity of the raster layer. Must be between 0 and 1.\n        name (str, optional): Name of the layer. Defaults to the stem of the file path.\n        colormap (str or dict, optional): Colormap to apply to the raster. Can be a colormap name or a dict. Resolved using `common.resolve_colormap`.\n        **kwargs (dict): Additional keyword arguments passed to the tile layer.\n\n    Returns:\n        None\n\n    Raises:\n        FileNotFoundError: If the local raster file does not exist.\n        ValueError: If the opacity is not valid or raster layer cannot be added.\n    \"\"\"\n    from localtileserver import TileClient, get_leaflet_tile_layer\n\n    if isinstance(url, Path) and not url.exists():\n        raise FileNotFoundError(f\"Raster file not found: {url}\")\n\n    if not isinstance(opacity, (int, float)) or not (0 &lt;= opacity &lt;= 1):\n        raise ValueError(\"opacity must be a float between 0 and 1\")\n\n    try:\n        colormap_arg = common.resolve_colormap(colormap)\n    except Exception as e:\n        raise ValueError(f\"Failed to resolve colormap: {e}\")\n\n    try:\n        client = TileClient(str(url))\n    except Exception as e:\n        raise ValueError(f\"Failed to create TileClient from {url}: {e}\")\n\n    try:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n        tile_layer = get_leaflet_tile_layer(\n            client, colormap=colormap_arg, opacity=opacity, **kwargs\n        )\n        tile_layer.name = name or \"\"\n        self.add(tile_layer)\n    except Exception as e:\n        raise ValueError(f\"Failed to add raster layer: {e}\")\n</code></pre>"},{"location":"chartops/#chartops.chartops.Map.add_vector","title":"<code>add_vector(self, filepath, name='', **kwargs)</code>","text":"<p>Add a vector layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path or str</code> <p>Path to the vector dataset or URL to a remote file.</p> required <code>name</code> <code>str</code> <p>Name of the layer. Defaults to ''..</p> <code>''</code> <code>**kwargs</code> <code>dict</code> <p>Additional styling options for the layer. Valid options include: - color: str (default: 'blue') - weight: int (default: 2) - fillOpacity: float (default: 0.1)</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>If the local filepath does not exist.</p> <code>ValueError</code> <p>If the vector data cannot be read or converted to GeoJSON, or if styling options are invalid.</p> Source code in <code>chartops/chartops.py</code> <pre><code>def add_vector(self, filepath: Union[Path, str], name: str = \"\", **kwargs) -&gt; None:\n    \"\"\"\n    Add a vector layer to the map.\n\n    Args:\n        filepath (Path or str): Path to the vector dataset or URL to a remote file.\n        name (str): Name of the layer. Defaults to ''..\n        **kwargs (dict): Additional styling options for the layer. Valid options include:\n            - color: str (default: 'blue')\n            - weight: int (default: 2)\n            - fillOpacity: float (default: 0.1)\n\n    Returns:\n        None\n\n    Raises:\n        FileNotFoundError: If the local filepath does not exist.\n        ValueError: If the vector data cannot be read or converted to GeoJSON, or if styling options are invalid.\n    \"\"\"\n    if isinstance(filepath, Path) and not filepath.exists():\n        raise FileNotFoundError(f\"File not found: {filepath}\")\n\n    color = kwargs.get(\"color\", \"blue\")\n    if not isinstance(color, str):\n        raise ValueError(f\"color must be a string, got {type(color)}\")\n\n    weight = kwargs.get(\"weight\", 2)\n    if not isinstance(weight, int):\n        raise ValueError(f\"weight must be an integer, got {type(weight)}\")\n\n    fillOpacity = kwargs.get(\"fillOpacity\", 0.1)\n    if not isinstance(fillOpacity, (int, float)) or not (0 &lt;= fillOpacity &lt;= 1):\n        raise ValueError(\"fillOpacity must be a float between 0 and 1\")\n\n    try:\n        gdf = gpd.read_file(filepath)\n        geojson = gdf.__geo_interface__\n        layer = GeoJSON(\n            data=geojson,\n            name=name,\n            style={\"color\": color, \"weight\": weight, \"fillOpacity\": fillOpacity},\n        )\n        self.add(layer)\n    except Exception as e:\n        raise ValueError(f\"Failed to add vector layer from {filepath}: {e}\")\n</code></pre>"},{"location":"chartops/#chartops.chartops.Map.add_video","title":"<code>add_video(self, url, bounds, opacity, **kwargs)</code>","text":"<p>Add a video overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str or Path</code> <p>URL or path to the video to overlay.</p> required <code>bounds</code> <code>tuple</code> <p>A tuple of ((south, west), (north, east)) coordinates defining the bounding box of the video.</p> required <code>opacity</code> <code>float</code> <p>Opacity of the video overlay. Must be between 0 and 1.</p> required <code>**kwargs</code> <code>dict</code> <p>Additional keyword arguments passed to VideoOverlay.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the bounds are not in correct format or opacity is invalid.</p> <code>FileNotFoundError</code> <p>If the local video path does not exist.</p> Source code in <code>chartops/chartops.py</code> <pre><code>def add_video(\n    self,\n    url: Union[str, Path],\n    bounds: Tuple[Tuple[float, float], Tuple[float, float]],\n    opacity: float,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a video overlay to the map.\n\n    Args:\n        url (str or Path): URL or path to the video to overlay.\n        bounds (tuple): A tuple of ((south, west), (north, east)) coordinates defining the bounding box of the video.\n        opacity (float): Opacity of the video overlay. Must be between 0 and 1.\n        **kwargs (dict): Additional keyword arguments passed to VideoOverlay.\n\n    Returns:\n        None\n\n    Raises:\n        ValueError: If the bounds are not in correct format or opacity is invalid.\n        FileNotFoundError: If the local video path does not exist.\n    \"\"\"\n    if isinstance(url, Path) and not url.exists():\n        raise FileNotFoundError(f\"Video file not found: {url}\")\n\n    if (\n        not isinstance(bounds, tuple)\n        or len(bounds) != 2\n        or not all(isinstance(pair, tuple) and len(pair) == 2 for pair in bounds)\n        or not all(\n            isinstance(coord, (int, float)) for pair in bounds for coord in pair\n        )\n    ):\n        raise TypeError(\n            \"bounds must be a tuple of two (lat, lon) tuples: ((south, west), (north, east))\"\n        )\n\n    if not isinstance(opacity, (int, float)) or not (0 &lt;= opacity &lt;= 1):\n        raise TypeError(\"opacity must be a float between 0 and 1\")\n\n    try:\n        video = VideoOverlay(url=str(url), bounds=bounds, opacity=opacity, **kwargs)\n        self.add(video)\n    except Exception as e:\n        raise ValueError(f\"Failed to add video overlay: {e}\")\n</code></pre>"},{"location":"chartops/#chartops.chartops.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, name, format, transparent, **kwargs)</code>","text":"<p>Add a WMS (Web Map Service) layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Base URL of the WMS service.</p> required <code>layers</code> <code>str</code> <p>Comma-separated list of layer names to request from the service.</p> required <code>name</code> <code>str</code> <p>Name of the layer to show in the map.</p> required <code>format</code> <code>str</code> <p>Image format for the WMS tiles (e.g., 'image/png').</p> required <code>transparent</code> <code>bool</code> <p>Whether the WMS tiles should support transparency.</p> required <code>**kwargs</code> <code>dict</code> <p>Additional keyword arguments passed to the WMSLayer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If any of the required parameters are not of the expected type.</p> <code>ValueError</code> <p>If the WMS layer cannot be created or added.</p> Source code in <code>chartops/chartops.py</code> <pre><code>def add_wms_layer(\n    self, url: str, layers: str, name: str, format: str, transparent: bool, **kwargs\n) -&gt; None:\n    \"\"\"\n    Add a WMS (Web Map Service) layer to the map.\n\n    Args:\n        url (str): Base URL of the WMS service.\n        layers (str): Comma-separated list of layer names to request from the service.\n        name (str): Name of the layer to show in the map.\n        format (str): Image format for the WMS tiles (e.g., 'image/png').\n        transparent (bool): Whether the WMS tiles should support transparency.\n        **kwargs (dict): Additional keyword arguments passed to the WMSLayer.\n\n    Returns:\n        None\n\n    Raises:\n        TypeError: If any of the required parameters are not of the expected type.\n        ValueError: If the WMS layer cannot be created or added.\n    \"\"\"\n    if not isinstance(url, str):\n        raise TypeError(f\"url must be a string, got {type(url)}\")\n    if not isinstance(layers, str):\n        raise TypeError(f\"layers must be a string, got {type(layers)}\")\n    if not isinstance(name, str):\n        raise TypeError(f\"name must be a string, got {type(name)}\")\n    if not isinstance(format, str):\n        raise TypeError(f\"format must be a string, got {type(format)}\")\n    if not isinstance(transparent, bool):\n        raise TypeError(f\"transparent must be a boolean, got {type(transparent)}\")\n\n    try:\n        wms = WMSLayer(\n            url=url,\n            layers=layers,\n            format=format,\n            transparent=transparent,\n            **kwargs,\n        )\n        wms.name = name\n        self.add(wms)\n    except Exception as e:\n        raise ValueError(f\"Failed to add WMS layer: {e}\")\n</code></pre>"},{"location":"common/","title":"common module","text":""},{"location":"common/#chartops.common.resolve_basemap_name","title":"<code>resolve_basemap_name(basemap_name)</code>","text":"<p>Resolve a basemap name into an xyzservices object.</p> <p>basemap_name (str): Dot-separated name of the basemap (e.g., 'Esri.WorldImagery').</p> <p>Returns:</p> Type Description <code>Any</code> <p>An xyzservices object, compatible with both folium and ipyleaflet.</p> <p>Exceptions:</p> Type Description <code>AttributeError</code> <p>If the basemap name is not valid.</p> Source code in <code>chartops/common.py</code> <pre><code>def resolve_basemap_name(basemap_name: str) -&gt; Any:\n    \"\"\"\n    Resolve a basemap name into an xyzservices object.\n\n    Args:\n    basemap_name (str): Dot-separated name of the basemap (e.g., 'Esri.WorldImagery').\n\n    Returns:\n        Any: An xyzservices object, compatible with both folium and ipyleaflet.\n\n    Raises:\n        AttributeError: If the basemap name is not valid.\n    \"\"\"\n    import xyzservices.providers as xyz\n\n    provider = xyz\n    for part in basemap_name.split(\".\"):\n        if hasattr(provider, part):\n            provider = getattr(provider, part)\n        else:\n            raise AttributeError(f\"Unsupported basemap: {basemap_name}\")\n    return provider\n</code></pre>"},{"location":"common/#chartops.common.resolve_colormap","title":"<code>resolve_colormap(colormap)</code>","text":"<p>Resolve a colormap input to a matplotlib colormap object.</p> <p>Parameters:</p> Name Type Description Default <code>colormap</code> <code>str or dict</code> <p>The input colormap. - If dict: Creates and returns a LinearSegmentedColormap. - If str: Returns the corresponding built-in matplotlib colormap. - If None: Returns None.</p> required <p>Returns:</p> Type Description <code>matplotlib.colors.Colormap</code> <p>A valid colormap object.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the colormap dictionary is invalid or the string is not a recognized colormap name.</p> <code>TypeError</code> <p>If the input type is not str or dict.</p> Source code in <code>chartops/common.py</code> <pre><code>def resolve_colormap(colormap: Optional[Union[str, dict]]) -&gt; Optional[Colormap]:\n    \"\"\"\n    Resolve a colormap input to a matplotlib colormap object.\n\n    Args:\n        colormap (str or dict): The input colormap.\n            - If dict: Creates and returns a LinearSegmentedColormap.\n            - If str: Returns the corresponding built-in matplotlib colormap.\n            - If None: Returns None.\n\n    Returns:\n        matplotlib.colors.Colormap: A valid colormap object.\n\n    Raises:\n        ValueError: If the colormap dictionary is invalid or the string is not a recognized colormap name.\n        TypeError: If the input type is not str or dict.\n    \"\"\"\n    if colormap is None:\n        return None\n\n    if isinstance(colormap, dict):\n        try:\n            custom_colormap = LinearSegmentedColormap(\"custom\", colormap)\n            custom_colormap._init()  # Forces colormap dict validation\n            return custom_colormap\n        except Exception as e:\n            raise ValueError(f\"Invalid colormap dictionary format: {e}\")\n\n    if isinstance(colormap, str):\n        if colormap in colormaps:\n            return colormaps[colormap]\n        else:\n            raise ValueError(\n                f\"Invalid colormap name '{colormap}'. Must be one of: {list(colormaps)}\"\n            )\n\n    raise TypeError(\n        f\"Invalid colormap type: expected str, dict, or Colormap, got {type(colormap)}\"\n    )\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Thomatous/Chartops/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Chartops could always use more documentation, whether as part of the official Chartops docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Thomatous/Chartops/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up Chartops for local development.</p> <ol> <li> <p>Fork the Chartops repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/Chartops.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv Chartops\n$ cd Chartops/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 Chartops tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Thomatous/Chartops/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#is-this-a-real-project","title":"Is this a real project?","text":"<p>This is an educational python package created as part of the Geospatial Software Design course, provided by university of Tennessee Knoxville.</p>"},{"location":"faq/#what-is-the-meaning-of-life","title":"What is the meaning of life?","text":"<p>42!</p>"},{"location":"folium/","title":"chartops folium module","text":""},{"location":"folium/#chartops.folium.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>chartops/folium.py</code> <pre><code>class Map(folium.Map):\n    def add_basemap(self, basemap_name: str, **kwargs) -&gt; None:\n        \"\"\"\n        Add a basemap to the folium map.\n\n        Args:\n            basemap_name (str): Name of the basemap to add. Resolved with xyzservices.\n            **kwargs (dict): Extra kwargs to pass to basemap_to_tiles.\n\n        Returns:\n            None\n        \"\"\"\n        basemap = common.resolve_basemap_name(basemap_name)\n        folium.TileLayer(\n            tiles=basemap.build_url(),\n            attr=basemap.attribution,\n            name=basemap_name,\n            **kwargs,\n        ).add_to(self)\n\n    def add_layer_control(self) -&gt; None:\n        \"\"\"\n        Add a layer control widget to the folium map.\n\n        Returns:\n            None\n        \"\"\"\n        folium.LayerControl().add_to(self)\n\n    def add_vector(self, filepath: Union[Path, str], name: str, **kwargs) -&gt; None:\n        \"\"\"\n        Add a vector data layer to the folium map.\n\n        Args:\n            filepath (Path or str): Path to the vector dataset or URL to a remote file.\n            name (str): Name of the layer. Defaults to ''..\n            **kwargs (dict): Additional styling options for the layer. Valid options include:\n                - color: str (default: 'blue')\n                - weight: int (default: 2)\n                - fillOpacity: float (default: 0.1)\n\n        Returns:\n            None\n\n        Raises:\n            FileNotFoundError: If the provided file path does not exist.\n            ValueError: If styling parameters are invalid.\n        \"\"\"\n        color = kwargs.get(\"color\", \"blue\")\n        if not isinstance(color, str):\n            raise ValueError(f\"color must be a string, got {type(color)}\")\n\n        weight = kwargs.get(\"weight\", 2)\n        if not isinstance(weight, int):\n            raise ValueError(f\"weight must be an integer, got {type(weight)}\")\n\n        fill_opacity = kwargs.get(\"fillOpacity\", 0.1)\n        if not isinstance(fill_opacity, (int, float)) or not (0 &lt;= fill_opacity &lt;= 1):\n            raise ValueError(\"fillOpacity must be a float between 0 and 1\")\n\n        if isinstance(filepath, str) and filepath.startswith(\"http\"):\n            folium.GeoJson(\n                filepath,\n                name=name,\n                style_function=lambda feature: {\n                    \"color\": color,\n                    \"weight\": weight,\n                    \"fillOpacity\": fill_opacity,\n                },\n            ).add_to(self)\n        else:\n            path = Path(filepath)\n            if not path.exists():\n                raise FileNotFoundError(f\"File not found: {filepath}\")\n            gdf = gpd.read_file(path)\n            folium.GeoJson(\n                gdf,\n                name=name,\n                style_function=lambda feature: {\n                    \"color\": color,\n                    \"weight\": weight,\n                    \"fillOpacity\": fill_opacity,\n                },\n            ).add_to(self)\n</code></pre>"},{"location":"folium/#chartops.folium.Map.add_basemap","title":"<code>add_basemap(self, basemap_name, **kwargs)</code>","text":"<p>Add a basemap to the folium map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap_name</code> <code>str</code> <p>Name of the basemap to add. Resolved with xyzservices.</p> required <code>**kwargs</code> <code>dict</code> <p>Extra kwargs to pass to basemap_to_tiles.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>chartops/folium.py</code> <pre><code>def add_basemap(self, basemap_name: str, **kwargs) -&gt; None:\n    \"\"\"\n    Add a basemap to the folium map.\n\n    Args:\n        basemap_name (str): Name of the basemap to add. Resolved with xyzservices.\n        **kwargs (dict): Extra kwargs to pass to basemap_to_tiles.\n\n    Returns:\n        None\n    \"\"\"\n    basemap = common.resolve_basemap_name(basemap_name)\n    folium.TileLayer(\n        tiles=basemap.build_url(),\n        attr=basemap.attribution,\n        name=basemap_name,\n        **kwargs,\n    ).add_to(self)\n</code></pre>"},{"location":"folium/#chartops.folium.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Add a layer control widget to the folium map.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>chartops/folium.py</code> <pre><code>def add_layer_control(self) -&gt; None:\n    \"\"\"\n    Add a layer control widget to the folium map.\n\n    Returns:\n        None\n    \"\"\"\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"folium/#chartops.folium.Map.add_vector","title":"<code>add_vector(self, filepath, name, **kwargs)</code>","text":"<p>Add a vector data layer to the folium map.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path or str</code> <p>Path to the vector dataset or URL to a remote file.</p> required <code>name</code> <code>str</code> <p>Name of the layer. Defaults to ''..</p> required <code>**kwargs</code> <code>dict</code> <p>Additional styling options for the layer. Valid options include: - color: str (default: 'blue') - weight: int (default: 2) - fillOpacity: float (default: 0.1)</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>If the provided file path does not exist.</p> <code>ValueError</code> <p>If styling parameters are invalid.</p> Source code in <code>chartops/folium.py</code> <pre><code>def add_vector(self, filepath: Union[Path, str], name: str, **kwargs) -&gt; None:\n    \"\"\"\n    Add a vector data layer to the folium map.\n\n    Args:\n        filepath (Path or str): Path to the vector dataset or URL to a remote file.\n        name (str): Name of the layer. Defaults to ''..\n        **kwargs (dict): Additional styling options for the layer. Valid options include:\n            - color: str (default: 'blue')\n            - weight: int (default: 2)\n            - fillOpacity: float (default: 0.1)\n\n    Returns:\n        None\n\n    Raises:\n        FileNotFoundError: If the provided file path does not exist.\n        ValueError: If styling parameters are invalid.\n    \"\"\"\n    color = kwargs.get(\"color\", \"blue\")\n    if not isinstance(color, str):\n        raise ValueError(f\"color must be a string, got {type(color)}\")\n\n    weight = kwargs.get(\"weight\", 2)\n    if not isinstance(weight, int):\n        raise ValueError(f\"weight must be an integer, got {type(weight)}\")\n\n    fill_opacity = kwargs.get(\"fillOpacity\", 0.1)\n    if not isinstance(fill_opacity, (int, float)) or not (0 &lt;= fill_opacity &lt;= 1):\n        raise ValueError(\"fillOpacity must be a float between 0 and 1\")\n\n    if isinstance(filepath, str) and filepath.startswith(\"http\"):\n        folium.GeoJson(\n            filepath,\n            name=name,\n            style_function=lambda feature: {\n                \"color\": color,\n                \"weight\": weight,\n                \"fillOpacity\": fill_opacity,\n            },\n        ).add_to(self)\n    else:\n        path = Path(filepath)\n        if not path.exists():\n            raise FileNotFoundError(f\"File not found: {filepath}\")\n        gdf = gpd.read_file(path)\n        folium.GeoJson(\n            gdf,\n            name=name,\n            style_function=lambda feature: {\n                \"color\": color,\n                \"weight\": weight,\n                \"fillOpacity\": fill_opacity,\n            },\n        ).add_to(self)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Chartops, run this command in your terminal:</p> <pre><code>pip install Chartops\n</code></pre> <p>This is the preferred method to install Chartops, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install Chartops from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Thomatous/Chartops\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use Chartops in a project:</p> <pre><code>import chartops\n</code></pre>"},{"location":"examples/chartops/","title":"Chartops","text":"In\u00a0[1]: Copied! <pre>%pip install -q chartops\n</pre> %pip install -q chartops <pre>Note: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[2]: Copied! <pre>from chartops.chartops import Map\n</pre> from chartops.chartops import Map In\u00a0[3]: Copied! <pre>map = Map(center=[34.5, 18.0], zoom=5)\nmap\n</pre> map = Map(center=[34.5, 18.0], zoom=5) map Out[3]: In\u00a0[4]: Copied! <pre>map_with_basemap = Map(center=[34.5, 18.0], zoom=5)\nmap_with_basemap.add_basemap(\"OpenTopoMap\")\nmap_with_basemap\n</pre> map_with_basemap = Map(center=[34.5, 18.0], zoom=5) map_with_basemap.add_basemap(\"OpenTopoMap\") map_with_basemap Out[4]: In\u00a0[5]: Copied! <pre>map_with_layer_controls = Map(center=[34.5, 18.0], zoom=5)\nmap_with_layer_controls.add_layer_control()\nmap_with_layer_controls\n</pre> map_with_layer_controls = Map(center=[34.5, 18.0], zoom=5) map_with_layer_controls.add_layer_control() map_with_layer_controls Out[5]: In\u00a0[6]: Copied! <pre>map_with_vector = Map(center=[34.5, 18.0], zoom=5)\nmap_with_vector.add_vector(\n    \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\",\n    \"Europe Vector\",\n)\nmap_with_vector\n</pre> map_with_vector = Map(center=[34.5, 18.0], zoom=5) map_with_vector.add_vector(     \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\",     \"Europe Vector\", ) map_with_vector Out[6]: In\u00a0[7]: Copied! <pre>map_with_multiple_features = Map(center=[34.5, 18.0], zoom=5)\nmap_with_multiple_features.add_basemap(\"Esri.WorldImagery\")\nmap_with_multiple_features.add_layer_control()\nmap_with_multiple_features.add_vector(\n    \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\",\n    \"Europe Vector\",\n)\nmap_with_multiple_features\n</pre> map_with_multiple_features = Map(center=[34.5, 18.0], zoom=5) map_with_multiple_features.add_basemap(\"Esri.WorldImagery\") map_with_multiple_features.add_layer_control() map_with_multiple_features.add_vector(     \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\",     \"Europe Vector\", ) map_with_multiple_features Out[7]: In\u00a0[8]: Copied! <pre>map_with_raster = Map(center=[34.5, 18.0], zoom=5)\nmap_with_raster.add_raster(\n    url=\"https://github.com/opengeos/datasets/releases/download/raster/dem_90m.tif\",\n    colormap={\n        \"red\": ((0.0, 0.0, 0.0), (0.5, 0.0, 0.1), (1.0, 1.0, 1.0)),\n        \"green\": ((0.0, 0.0, 0.0), (1.0, 0.0, 0.0)),\n        \"blue\": ((0.0, 0.0, 1.0), (0.5, 0.1, 0.0), (1.0, 0.0, 0.0)),\n    },\n    opacity=0.7,\n)\nmap_with_raster\n</pre> map_with_raster = Map(center=[34.5, 18.0], zoom=5) map_with_raster.add_raster(     url=\"https://github.com/opengeos/datasets/releases/download/raster/dem_90m.tif\",     colormap={         \"red\": ((0.0, 0.0, 0.0), (0.5, 0.0, 0.1), (1.0, 1.0, 1.0)),         \"green\": ((0.0, 0.0, 0.0), (1.0, 0.0, 0.0)),         \"blue\": ((0.0, 0.0, 1.0), (0.5, 0.1, 0.0), (1.0, 0.0, 0.0)),     },     opacity=0.7, ) map_with_raster Out[8]: In\u00a0[9]: Copied! <pre>map_with_image = Map(center=[28.0, -114.0], zoom=5)\nmap_with_image.add_image(\n    url=\"https://i.imgur.com/06Q1fSz.png\", bounds=((13, -130), (32, -100)), opacity=0.5\n)\nmap_with_image\n</pre> map_with_image = Map(center=[28.0, -114.0], zoom=5) map_with_image.add_image(     url=\"https://i.imgur.com/06Q1fSz.png\", bounds=((13, -130), (32, -100)), opacity=0.5 ) map_with_image Out[9]: In\u00a0[10]: Copied! <pre>map_with_video = Map(center=[28.0, -114.0], zoom=5)\nmap_with_video.add_video(\n    url=\"https://www.mapbox.com/bites/00188/patricia_nasa.webm\",\n    bounds=((13, -130), (32, -100)),\n    opacity=1.0,\n)\nmap_with_video\n</pre> map_with_video = Map(center=[28.0, -114.0], zoom=5) map_with_video.add_video(     url=\"https://www.mapbox.com/bites/00188/patricia_nasa.webm\",     bounds=((13, -130), (32, -100)),     opacity=1.0, ) map_with_video Out[10]: In\u00a0[11]: Copied! <pre>map_with_wms = Map(center=[28.0, -114.0], zoom=5)\nmap_with_wms.add_wms_layer(\n    \"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi\",\n    \"nexrad-n0r-900913\",\n    \"Test\",\n    \"image/png\",\n    True,\n)\nmap_with_wms\n</pre> map_with_wms = Map(center=[28.0, -114.0], zoom=5) map_with_wms.add_wms_layer(     \"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi\",     \"nexrad-n0r-900913\",     \"Test\",     \"image/png\",     True, ) map_with_wms Out[11]:"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>%pip install chartops\n</pre> %pip install chartops <pre>Requirement already satisfied: chartops in /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages (0.2.0)\r\nRequirement already satisfied: folium in /home/runner/.local/lib/python3.11/site-packages (from chartops) (0.20.0)\r\nRequirement already satisfied: geopandas in /home/runner/.local/lib/python3.11/site-packages (from chartops) (1.1.1)\r\nRequirement already satisfied: ipyleaflet in /home/runner/.local/lib/python3.11/site-packages (from chartops) (0.20.0)\r\nRequirement already satisfied: localtileserver in /home/runner/.local/lib/python3.11/site-packages (from chartops) (0.10.6)\r\nRequirement already satisfied: matplotlib in /home/runner/.local/lib/python3.11/site-packages (from chartops) (3.10.3)\r\nRequirement already satisfied: numpy in /home/runner/.local/lib/python3.11/site-packages (from chartops) (2.3.1)\r\nRequirement already satisfied: branca&gt;=0.6.0 in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;chartops) (0.8.1)\r\nRequirement already satisfied: jinja2&gt;=2.9 in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;chartops) (3.1.6)\r\nRequirement already satisfied: requests in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;chartops) (2.32.4)\r\nRequirement already satisfied: xyzservices in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;chartops) (2025.4.0)\r\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /home/runner/.local/lib/python3.11/site-packages (from jinja2&gt;=2.9-&gt;folium-&gt;chartops) (3.0.2)\r\nRequirement already satisfied: pyogrio&gt;=0.7.2 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (0.11.0)\r\nRequirement already satisfied: packaging in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (25.0)\r\nRequirement already satisfied: pandas&gt;=2.0.0 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (2.3.1)\r\nRequirement already satisfied: pyproj&gt;=3.5.0 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (3.7.1)\r\nRequirement already satisfied: shapely&gt;=2.0.0 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (2.1.1)\r\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /home/runner/.local/lib/python3.11/site-packages (from pandas&gt;=2.0.0-&gt;geopandas-&gt;chartops) (2.9.0.post0)\r\nRequirement already satisfied: pytz&gt;=2020.1 in /home/runner/.local/lib/python3.11/site-packages (from pandas&gt;=2.0.0-&gt;geopandas-&gt;chartops) (2025.2)\r\nRequirement already satisfied: tzdata&gt;=2022.7 in /home/runner/.local/lib/python3.11/site-packages (from pandas&gt;=2.0.0-&gt;geopandas-&gt;chartops) (2025.2)\r\nRequirement already satisfied: certifi in /home/runner/.local/lib/python3.11/site-packages (from pyogrio&gt;=0.7.2-&gt;geopandas-&gt;chartops) (2025.7.9)\r\nRequirement already satisfied: six&gt;=1.5 in /home/runner/.local/lib/python3.11/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas&gt;=2.0.0-&gt;geopandas-&gt;chartops) (1.17.0)\r\nRequirement already satisfied: ipywidgets&lt;9,&gt;=7.6.0 in /home/runner/.local/lib/python3.11/site-packages (from ipyleaflet-&gt;chartops) (8.1.7)\r\nRequirement already satisfied: jupyter-leaflet&lt;0.21,&gt;=0.20 in /home/runner/.local/lib/python3.11/site-packages (from ipyleaflet-&gt;chartops) (0.20.0)\r\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in /home/runner/.local/lib/python3.11/site-packages (from ipyleaflet-&gt;chartops) (0.2.1)\r\nRequirement already satisfied: comm&gt;=0.1.3 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.2.2)\r\nRequirement already satisfied: ipython&gt;=6.1.0 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (9.4.0)\r\nRequirement already satisfied: traitlets&gt;=4.3.1 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (5.14.3)\r\nRequirement already satisfied: widgetsnbextension~=4.0.14 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (4.0.14)\r\nRequirement already satisfied: jupyterlab_widgets~=3.0.15 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (3.0.15)\r\nRequirement already satisfied: decorator in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (5.2.1)\r\nRequirement already satisfied: ipython-pygments-lexers in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (1.1.1)\r\nRequirement already satisfied: jedi&gt;=0.16 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.19.2)\r\n</pre> <pre>Requirement already satisfied: matplotlib-inline in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.1.7)\r\nRequirement already satisfied: pexpect&gt;4.3 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (4.9.0)\r\nRequirement already satisfied: prompt_toolkit&lt;3.1.0,&gt;=3.0.41 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (3.0.51)\r\nRequirement already satisfied: pygments&gt;=2.4.0 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (2.19.2)\r\nRequirement already satisfied: stack_data in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.6.3)\r\nRequirement already satisfied: typing_extensions&gt;=4.6 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (4.14.1)\r\nRequirement already satisfied: wcwidth in /home/runner/.local/lib/python3.11/site-packages (from prompt_toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.2.13)\r\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.4 in /home/runner/.local/lib/python3.11/site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.8.4)\r\nRequirement already satisfied: ptyprocess&gt;=0.5 in /home/runner/.local/lib/python3.11/site-packages (from pexpect&gt;4.3-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.7.0)\r\nRequirement already satisfied: click in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (8.2.1)\r\nRequirement already satisfied: flask&lt;4,&gt;=2.0.0 in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (3.1.1)\r\nRequirement already satisfied: Flask-Caching in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (2.3.1)\r\nRequirement already satisfied: flask-cors in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (6.0.1)\r\nRequirement already satisfied: flask-restx&gt;=1.3.0 in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (1.3.0)\r\nRequirement already satisfied: rio-tiler in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (7.8.1)\r\nRequirement already satisfied: rio-cogeo in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (5.4.2)\r\nRequirement already satisfied: server-thread in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (0.3.0)\r\nRequirement already satisfied: scooby in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (0.10.1)\r\nRequirement already satisfied: werkzeug in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (3.1.3)\r\nRequirement already satisfied: blinker&gt;=1.9.0 in /home/runner/.local/lib/python3.11/site-packages (from flask&lt;4,&gt;=2.0.0-&gt;localtileserver-&gt;chartops) (1.9.0)\r\nRequirement already satisfied: itsdangerous&gt;=2.2.0 in /home/runner/.local/lib/python3.11/site-packages (from flask&lt;4,&gt;=2.0.0-&gt;localtileserver-&gt;chartops) (2.2.0)\r\nRequirement already satisfied: aniso8601&gt;=0.82 in /home/runner/.local/lib/python3.11/site-packages (from flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (10.0.1)\r\nRequirement already satisfied: jsonschema in /home/runner/.local/lib/python3.11/site-packages (from flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (4.24.0)\r\nRequirement already satisfied: importlib-resources in /home/runner/.local/lib/python3.11/site-packages (from flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (6.5.2)\r\n</pre> <pre>Requirement already satisfied: cachelib&gt;=0.9.0 in /home/runner/.local/lib/python3.11/site-packages (from Flask-Caching-&gt;localtileserver-&gt;chartops) (0.13.0)\r\nRequirement already satisfied: attrs&gt;=22.2.0 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (25.3.0)\r\nRequirement already satisfied: jsonschema-specifications&gt;=2023.03.6 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (2025.4.1)\r\nRequirement already satisfied: referencing&gt;=0.28.4 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (0.36.2)\r\nRequirement already satisfied: rpds-py&gt;=0.7.1 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (0.26.0)\r\nRequirement already satisfied: contourpy&gt;=1.0.1 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (1.3.2)\r\nRequirement already satisfied: cycler&gt;=0.10 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (0.12.1)\r\nRequirement already satisfied: fonttools&gt;=4.22.0 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (4.58.5)\r\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (1.4.8)\r\nRequirement already satisfied: pillow&gt;=8 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (11.3.0)\r\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (3.2.3)\r\nRequirement already satisfied: charset_normalizer&lt;4,&gt;=2 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;folium-&gt;chartops) (3.4.2)\r\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;folium-&gt;chartops) (3.10)\r\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;folium-&gt;chartops) (2.5.0)\r\n</pre> <pre>Requirement already satisfied: rasterio&gt;=1.3.3 in /home/runner/.local/lib/python3.11/site-packages (from rio-cogeo-&gt;localtileserver-&gt;chartops) (1.4.3)\r\nRequirement already satisfied: morecantile&lt;7.0,&gt;=5.0 in /home/runner/.local/lib/python3.11/site-packages (from rio-cogeo-&gt;localtileserver-&gt;chartops) (6.2.0)\r\nRequirement already satisfied: pydantic~=2.0 in /home/runner/.local/lib/python3.11/site-packages (from rio-cogeo-&gt;localtileserver-&gt;chartops) (2.11.7)\r\nRequirement already satisfied: annotated-types&gt;=0.6.0 in /home/runner/.local/lib/python3.11/site-packages (from pydantic~=2.0-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (0.7.0)\r\nRequirement already satisfied: pydantic-core==2.33.2 in /home/runner/.local/lib/python3.11/site-packages (from pydantic~=2.0-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (2.33.2)\r\nRequirement already satisfied: typing-inspection&gt;=0.4.0 in /home/runner/.local/lib/python3.11/site-packages (from pydantic~=2.0-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (0.4.1)\r\nRequirement already satisfied: affine in /home/runner/.local/lib/python3.11/site-packages (from rasterio&gt;=1.3.3-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (2.4.0)\r\nRequirement already satisfied: cligj&gt;=0.5 in /home/runner/.local/lib/python3.11/site-packages (from rasterio&gt;=1.3.3-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (0.7.2)\r\nRequirement already satisfied: click-plugins in /home/runner/.local/lib/python3.11/site-packages (from rasterio&gt;=1.3.3-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (1.1.1.2)\r\nRequirement already satisfied: cachetools in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (6.1.0)\r\nRequirement already satisfied: color-operations in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (0.2.0)\r\nRequirement already satisfied: httpx in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (0.28.1)\r\nRequirement already satisfied: numexpr in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (2.11.0)\r\nRequirement already satisfied: pystac&lt;2.0,&gt;=1.9 in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (1.13.0)\r\nRequirement already satisfied: anyio in /home/runner/.local/lib/python3.11/site-packages (from httpx-&gt;rio-tiler-&gt;localtileserver-&gt;chartops) (4.9.0)\r\nRequirement already satisfied: httpcore==1.* in /home/runner/.local/lib/python3.11/site-packages (from httpx-&gt;rio-tiler-&gt;localtileserver-&gt;chartops) (1.0.9)\r\nRequirement already satisfied: h11&gt;=0.16 in /home/runner/.local/lib/python3.11/site-packages (from httpcore==1.*-&gt;httpx-&gt;rio-tiler-&gt;localtileserver-&gt;chartops) (0.16.0)\r\n</pre> <pre>Requirement already satisfied: sniffio&gt;=1.1 in /home/runner/.local/lib/python3.11/site-packages (from anyio-&gt;httpx-&gt;rio-tiler-&gt;localtileserver-&gt;chartops) (1.3.1)\r\nRequirement already satisfied: uvicorn in /home/runner/.local/lib/python3.11/site-packages (from server-thread-&gt;localtileserver-&gt;chartops) (0.35.0)\r\nRequirement already satisfied: executing&gt;=1.2.0 in /home/runner/.local/lib/python3.11/site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (2.2.0)\r\nRequirement already satisfied: asttokens&gt;=2.1.0 in /home/runner/.local/lib/python3.11/site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (3.0.0)\r\nRequirement already satisfied: pure-eval in /home/runner/.local/lib/python3.11/site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.2.3)\r\n</pre> <pre>Note: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[2]: Copied! <pre>from chartops.folium import Map\n</pre> from chartops.folium import Map In\u00a0[3]: Copied! <pre>map = Map(location=[34.5, 18.0], zoom_start=5)\nmap.save(\"map.html\")\nmap\n</pre> map = Map(location=[34.5, 18.0], zoom_start=5) map.save(\"map.html\") map Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>map_with_basemap = Map(location=[34.5, 18.0], zoom_start=5)\nmap_with_basemap.add_basemap(\"Esri.WorldImagery\")\nmap_with_basemap.save(\"map_with_basemap.html\")\nmap_with_basemap\n</pre> map_with_basemap = Map(location=[34.5, 18.0], zoom_start=5) map_with_basemap.add_basemap(\"Esri.WorldImagery\") map_with_basemap.save(\"map_with_basemap.html\") map_with_basemap Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre>map_with_layer_controls = Map(location=[34.5, 18.0], zoom_start=5)\nmap_with_layer_controls.add_layer_control()\nmap_with_layer_controls.save(\"map_with_layer_controls.html\")\nmap_with_layer_controls\n</pre> map_with_layer_controls = Map(location=[34.5, 18.0], zoom_start=5) map_with_layer_controls.add_layer_control() map_with_layer_controls.save(\"map_with_layer_controls.html\") map_with_layer_controls Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>map_with_vector = Map(location=[34.5, 18.0], zoom_start=5)\nmap_with_vector.add_vector(\n    \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\",\n    \"Europe Vector\",\n)\nmap_with_layer_controls.save(\"map_with_vector.html\")\nmap_with_vector\n</pre> map_with_vector = Map(location=[34.5, 18.0], zoom_start=5) map_with_vector.add_vector(     \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\",     \"Europe Vector\", ) map_with_layer_controls.save(\"map_with_vector.html\") map_with_vector Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[7]: Copied! <pre>map_with_all_features = Map(location=[34.5, 18.0], zoom_start=5)\nmap_with_all_features.add_basemap(\"OpenTopoMap\")\nmap_with_all_features.add_vector(\n    \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\",\n    \"Europe Vector\",\n)\nmap_with_all_features.add_layer_control()\nmap_with_layer_controls.save(\"map_with_all_features.html\")\nmap_with_all_features\n</pre> map_with_all_features = Map(location=[34.5, 18.0], zoom_start=5) map_with_all_features.add_basemap(\"OpenTopoMap\") map_with_all_features.add_vector(     \"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\",     \"Europe Vector\", ) map_with_all_features.add_layer_control() map_with_layer_controls.save(\"map_with_all_features.html\") map_with_all_features Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>%pip install chartops\n</pre> %pip install chartops <pre>Requirement already satisfied: chartops in /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages (0.2.0)\r\nRequirement already satisfied: folium in /home/runner/.local/lib/python3.11/site-packages (from chartops) (0.20.0)\r\nRequirement already satisfied: geopandas in /home/runner/.local/lib/python3.11/site-packages (from chartops) (1.1.1)\r\nRequirement already satisfied: ipyleaflet in /home/runner/.local/lib/python3.11/site-packages (from chartops) (0.20.0)\r\nRequirement already satisfied: localtileserver in /home/runner/.local/lib/python3.11/site-packages (from chartops) (0.10.6)\r\nRequirement already satisfied: matplotlib in /home/runner/.local/lib/python3.11/site-packages (from chartops) (3.10.3)\r\nRequirement already satisfied: numpy in /home/runner/.local/lib/python3.11/site-packages (from chartops) (2.3.1)\r\nRequirement already satisfied: branca&gt;=0.6.0 in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;chartops) (0.8.1)\r\nRequirement already satisfied: jinja2&gt;=2.9 in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;chartops) (3.1.6)\r\nRequirement already satisfied: requests in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;chartops) (2.32.4)\r\nRequirement already satisfied: xyzservices in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;chartops) (2025.4.0)\r\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /home/runner/.local/lib/python3.11/site-packages (from jinja2&gt;=2.9-&gt;folium-&gt;chartops) (3.0.2)\r\nRequirement already satisfied: pyogrio&gt;=0.7.2 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (0.11.0)\r\nRequirement already satisfied: packaging in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (25.0)\r\nRequirement already satisfied: pandas&gt;=2.0.0 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (2.3.1)\r\nRequirement already satisfied: pyproj&gt;=3.5.0 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (3.7.1)\r\nRequirement already satisfied: shapely&gt;=2.0.0 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;chartops) (2.1.1)\r\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /home/runner/.local/lib/python3.11/site-packages (from pandas&gt;=2.0.0-&gt;geopandas-&gt;chartops) (2.9.0.post0)\r\nRequirement already satisfied: pytz&gt;=2020.1 in /home/runner/.local/lib/python3.11/site-packages (from pandas&gt;=2.0.0-&gt;geopandas-&gt;chartops) (2025.2)\r\nRequirement already satisfied: tzdata&gt;=2022.7 in /home/runner/.local/lib/python3.11/site-packages (from pandas&gt;=2.0.0-&gt;geopandas-&gt;chartops) (2025.2)\r\nRequirement already satisfied: certifi in /home/runner/.local/lib/python3.11/site-packages (from pyogrio&gt;=0.7.2-&gt;geopandas-&gt;chartops) (2025.7.9)\r\nRequirement already satisfied: six&gt;=1.5 in /home/runner/.local/lib/python3.11/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas&gt;=2.0.0-&gt;geopandas-&gt;chartops) (1.17.0)\r\nRequirement already satisfied: ipywidgets&lt;9,&gt;=7.6.0 in /home/runner/.local/lib/python3.11/site-packages (from ipyleaflet-&gt;chartops) (8.1.7)\r\nRequirement already satisfied: jupyter-leaflet&lt;0.21,&gt;=0.20 in /home/runner/.local/lib/python3.11/site-packages (from ipyleaflet-&gt;chartops) (0.20.0)\r\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in /home/runner/.local/lib/python3.11/site-packages (from ipyleaflet-&gt;chartops) (0.2.1)\r\nRequirement already satisfied: comm&gt;=0.1.3 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.2.2)\r\nRequirement already satisfied: ipython&gt;=6.1.0 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (9.4.0)\r\nRequirement already satisfied: traitlets&gt;=4.3.1 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (5.14.3)\r\nRequirement already satisfied: widgetsnbextension~=4.0.14 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (4.0.14)\r\nRequirement already satisfied: jupyterlab_widgets~=3.0.15 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (3.0.15)\r\n</pre> <pre>Requirement already satisfied: decorator in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (5.2.1)\r\nRequirement already satisfied: ipython-pygments-lexers in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (1.1.1)\r\nRequirement already satisfied: jedi&gt;=0.16 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.19.2)\r\nRequirement already satisfied: matplotlib-inline in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.1.7)\r\nRequirement already satisfied: pexpect&gt;4.3 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (4.9.0)\r\nRequirement already satisfied: prompt_toolkit&lt;3.1.0,&gt;=3.0.41 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (3.0.51)\r\nRequirement already satisfied: pygments&gt;=2.4.0 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (2.19.2)\r\nRequirement already satisfied: stack_data in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.6.3)\r\nRequirement already satisfied: typing_extensions&gt;=4.6 in /home/runner/.local/lib/python3.11/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (4.14.1)\r\nRequirement already satisfied: wcwidth in /home/runner/.local/lib/python3.11/site-packages (from prompt_toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.2.13)\r\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.4 in /home/runner/.local/lib/python3.11/site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.8.4)\r\nRequirement already satisfied: ptyprocess&gt;=0.5 in /home/runner/.local/lib/python3.11/site-packages (from pexpect&gt;4.3-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.7.0)\r\nRequirement already satisfied: click in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (8.2.1)\r\nRequirement already satisfied: flask&lt;4,&gt;=2.0.0 in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (3.1.1)\r\nRequirement already satisfied: Flask-Caching in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (2.3.1)\r\nRequirement already satisfied: flask-cors in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (6.0.1)\r\nRequirement already satisfied: flask-restx&gt;=1.3.0 in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (1.3.0)\r\nRequirement already satisfied: rio-tiler in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (7.8.1)\r\nRequirement already satisfied: rio-cogeo in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (5.4.2)\r\nRequirement already satisfied: server-thread in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (0.3.0)\r\nRequirement already satisfied: scooby in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (0.10.1)\r\nRequirement already satisfied: werkzeug in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;chartops) (3.1.3)\r\nRequirement already satisfied: blinker&gt;=1.9.0 in /home/runner/.local/lib/python3.11/site-packages (from flask&lt;4,&gt;=2.0.0-&gt;localtileserver-&gt;chartops) (1.9.0)\r\nRequirement already satisfied: itsdangerous&gt;=2.2.0 in /home/runner/.local/lib/python3.11/site-packages (from flask&lt;4,&gt;=2.0.0-&gt;localtileserver-&gt;chartops) (2.2.0)\r\nRequirement already satisfied: aniso8601&gt;=0.82 in /home/runner/.local/lib/python3.11/site-packages (from flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (10.0.1)\r\nRequirement already satisfied: jsonschema in /home/runner/.local/lib/python3.11/site-packages (from flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (4.24.0)\r\nRequirement already satisfied: importlib-resources in /home/runner/.local/lib/python3.11/site-packages (from flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (6.5.2)\r\n</pre> <pre>Requirement already satisfied: cachelib&gt;=0.9.0 in /home/runner/.local/lib/python3.11/site-packages (from Flask-Caching-&gt;localtileserver-&gt;chartops) (0.13.0)\r\nRequirement already satisfied: attrs&gt;=22.2.0 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (25.3.0)\r\nRequirement already satisfied: jsonschema-specifications&gt;=2023.03.6 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (2025.4.1)\r\nRequirement already satisfied: referencing&gt;=0.28.4 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (0.36.2)\r\nRequirement already satisfied: rpds-py&gt;=0.7.1 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=1.3.0-&gt;localtileserver-&gt;chartops) (0.26.0)\r\nRequirement already satisfied: contourpy&gt;=1.0.1 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (1.3.2)\r\nRequirement already satisfied: cycler&gt;=0.10 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (0.12.1)\r\nRequirement already satisfied: fonttools&gt;=4.22.0 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (4.58.5)\r\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (1.4.8)\r\nRequirement already satisfied: pillow&gt;=8 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (11.3.0)\r\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;chartops) (3.2.3)\r\nRequirement already satisfied: charset_normalizer&lt;4,&gt;=2 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;folium-&gt;chartops) (3.4.2)\r\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;folium-&gt;chartops) (3.10)\r\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;folium-&gt;chartops) (2.5.0)\r\n</pre> <pre>Requirement already satisfied: rasterio&gt;=1.3.3 in /home/runner/.local/lib/python3.11/site-packages (from rio-cogeo-&gt;localtileserver-&gt;chartops) (1.4.3)\r\nRequirement already satisfied: morecantile&lt;7.0,&gt;=5.0 in /home/runner/.local/lib/python3.11/site-packages (from rio-cogeo-&gt;localtileserver-&gt;chartops) (6.2.0)\r\nRequirement already satisfied: pydantic~=2.0 in /home/runner/.local/lib/python3.11/site-packages (from rio-cogeo-&gt;localtileserver-&gt;chartops) (2.11.7)\r\nRequirement already satisfied: annotated-types&gt;=0.6.0 in /home/runner/.local/lib/python3.11/site-packages (from pydantic~=2.0-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (0.7.0)\r\nRequirement already satisfied: pydantic-core==2.33.2 in /home/runner/.local/lib/python3.11/site-packages (from pydantic~=2.0-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (2.33.2)\r\nRequirement already satisfied: typing-inspection&gt;=0.4.0 in /home/runner/.local/lib/python3.11/site-packages (from pydantic~=2.0-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (0.4.1)\r\nRequirement already satisfied: affine in /home/runner/.local/lib/python3.11/site-packages (from rasterio&gt;=1.3.3-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (2.4.0)\r\nRequirement already satisfied: cligj&gt;=0.5 in /home/runner/.local/lib/python3.11/site-packages (from rasterio&gt;=1.3.3-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (0.7.2)\r\nRequirement already satisfied: click-plugins in /home/runner/.local/lib/python3.11/site-packages (from rasterio&gt;=1.3.3-&gt;rio-cogeo-&gt;localtileserver-&gt;chartops) (1.1.1.2)\r\nRequirement already satisfied: cachetools in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (6.1.0)\r\nRequirement already satisfied: color-operations in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (0.2.0)\r\nRequirement already satisfied: httpx in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (0.28.1)\r\nRequirement already satisfied: numexpr in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (2.11.0)\r\nRequirement already satisfied: pystac&lt;2.0,&gt;=1.9 in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;chartops) (1.13.0)\r\nRequirement already satisfied: anyio in /home/runner/.local/lib/python3.11/site-packages (from httpx-&gt;rio-tiler-&gt;localtileserver-&gt;chartops) (4.9.0)\r\nRequirement already satisfied: httpcore==1.* in /home/runner/.local/lib/python3.11/site-packages (from httpx-&gt;rio-tiler-&gt;localtileserver-&gt;chartops) (1.0.9)\r\nRequirement already satisfied: h11&gt;=0.16 in /home/runner/.local/lib/python3.11/site-packages (from httpcore==1.*-&gt;httpx-&gt;rio-tiler-&gt;localtileserver-&gt;chartops) (0.16.0)\r\n</pre> <pre>Requirement already satisfied: sniffio&gt;=1.1 in /home/runner/.local/lib/python3.11/site-packages (from anyio-&gt;httpx-&gt;rio-tiler-&gt;localtileserver-&gt;chartops) (1.3.1)\r\nRequirement already satisfied: uvicorn in /home/runner/.local/lib/python3.11/site-packages (from server-thread-&gt;localtileserver-&gt;chartops) (0.35.0)\r\nRequirement already satisfied: executing&gt;=1.2.0 in /home/runner/.local/lib/python3.11/site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (2.2.0)\r\nRequirement already satisfied: asttokens&gt;=2.1.0 in /home/runner/.local/lib/python3.11/site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (3.0.0)\r\nRequirement already satisfied: pure-eval in /home/runner/.local/lib/python3.11/site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;chartops) (0.2.3)\r\n</pre> <pre>Note: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[2]: Copied! <pre>from chartops.chartops import Map\n</pre> from chartops.chartops import Map In\u00a0[3]: Copied! <pre>map = Map(center=[34.5, 18.0], zoom=5)\nmap\n</pre> map = Map(center=[34.5, 18.0], zoom=5) map Out[3]:"}]}